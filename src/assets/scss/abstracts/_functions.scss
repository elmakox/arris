// -----------------------------------------------------------------------------
// Sass functions.
// -----------------------------------------------------------------------------

/// Native `url(..)` function wrapper
/// @param {String} $base - base URL for the asset
/// @param {String} $type - asset type folder (e.g. `fonts/`)
/// @param {String} $path - asset path
/// @return {Url}
@function asset($base, $type, $path) {
  @return url($base + $type + $path);
}

/// Returns URL to an image based on its path
/// @param {String} $path - image path
/// @param {String} $base [$base-url] - base URL
/// @return {Url}
/// @require $base-url
@function image($path, $base: $base-url) {
  @return asset($base, 'images/', $path);
}

/// Returns URL to a font based on its path
/// @param {String} $path - font path
/// @param {String} $base [$base-url] - base URL
/// @return {Url}
/// @require $base-url
@function font($path, $base: $base-url) {
  @return asset($base, 'fonts/', $path);
}


//
// Get
//

@function get($map, $keys...) {
  @if length($keys) == 1 {
      $keys: nth($keys, 1);
  }

  @if type-of($map) != 'map' or $map == null {
      //@return false;
  }

  $warn: "#{nth($keys, 1)}";
  $length: length($keys);
  $get: map-get($map, nth($keys, 1));

  @if $length > 1 {
      @for $i from 2 through $length {
          @if $get != null and type-of($get) == 'map' {
              $warn: $warn + "->#{nth($keys, $i)}";
              $get: map-get($get, nth($keys, $i));

              @if $get == null {
                  @return null;
              }
          }
          @else {
              @return get-warning($warn, $get, nth($keys, $i));
          }
      }
  }

  @return $get;
}

@function has($map, $keys...) {
  @if length($keys) == 1 {
      $keys: nth($keys, 1);
  }

  @if type-of($map) != 'map' or $map == null {
      //@return false;
  }

  $warn: "#{nth($keys, 1)}";
  $length: length($keys);
  $get: map-get($map, nth($keys, 1));

  @if $length > 1 {
      @for $i from 2 through $length {
          @if $get != null and type-of($get) == 'map' {
              $warn: $warn + "->#{nth($keys, $i)}";
              $get: map-get($get, nth($keys, $i));

              @if $get == null {
                  @return false;
              }
          }
          @else {
               @return false;
          }
      }
  }

  @if $get != null {
      @return true;
  }
  @else {
      @return false;
  }
}

@function get-warning($warn, $get, $key) {
  @if $get == null {
      @warn "Map has no value for key search `#{$warn}`";
  }
  @else if type-of($get) != 'map' {
      @warn "Non-map value found for key search `#{$warn}`, cannot search for key `#{$key}`";
  }
  @return null;
}

@function str-replace($string, $search, $replace: "") {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index +
            str-length($search)), $search, $replace);
  }

  @return $string;
}



//
// Bootstrap extended functions
//

@function theme-inverse-color($key: "primary") {
  @return get($theme-inverse-colors, $key);
}

// @function theme-outline-inverse-color($key: "primary") {
//   @return get($theme-outline-inverse-colors, $key);
// }

// @function theme-hover-color($key: "primary") {
//   @return get($theme-hover-colors, $key);
// }

// @function theme-light-color($key: "primary") {
//   @return get($theme-light-colors, $key);
// }

// @function theme-shadow-color($key: "primary") {
//   @return get($theme-shadow-colors, $key);
// }